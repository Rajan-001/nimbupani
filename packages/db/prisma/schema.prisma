// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model UserInfo{
  id Int @id @default(autoincrement())
  name String 
  password String
  createdAt DateTime
  upadetAt DateTime @updatedAt
  role Role @default(USER)
  carts Cart?
  payments Payments[]
  order Orders[]
}

model Product{
  id Int @id @default(autoincrement())
  name String
  selling_price Int
  quantity Int
  rating Int
  cost_price Int
  description String
  image_url String @default("")
  cartItem CartItem[]
}

model Cart{
  id Int @id @default(autoincrement())
  userId Int @unique
  cartItem CartItem[]
  userCart UserInfo @relation(fields: [userId],references: [id])
  Payment Payments[]
  Order Orders[]
}
model CartItem{
  id Int @id @default(autoincrement())
  cartId Int 
  productId Int 
  quantity Int
  price Int
  cart Cart @relation(fields: [cartId],references: [id])
  product Product @relation(fields: [productId],references: [id])
  @@unique([cartId,productId])
}

enum Role{
  ADMIN
  USER
  GUEST
}

model Payments{
    id Int @id @default(autoincrement())
    Product_Cart_Id Int 
    User_Id Int
    Payment_Status Status
    user UserInfo @relation(fields:[User_Id],references: [id])
    cart Cart @relation(fields: [Product_Cart_Id],references: [id])
    order Orders[]
}

model Orders{
  id Int @id @default(autoincrement())
  userId Int
  cartId Int
  orderDate DateTime @default(now())
  paymentId Int
  user UserInfo @relation(fields: [userId], references: [id])
  cart Cart @relation(fields: [cartId], references: [id])
  payment Payments @relation(fields: [paymentId],references: [id])
}

enum Status{
  Sucessful
  failed
  Retry
}
